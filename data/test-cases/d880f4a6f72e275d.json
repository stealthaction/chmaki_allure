{"uid":"d880f4a6f72e275d","name":"Пометить все уведомления прочитанным","fullName":"tests_api.test_achievements_api.TestApiAchievements#test_mark_notification_all","historyId":"e5766eb140a381fded16a252d077bb29","time":{"start":1710263129799,"stop":1710263130137,"duration":338},"status":"failed","statusMessage":"AssertionError: Ожидался статус-код 200, но был получен 500","statusTrace":"self = <tests_api.test_achievements_api.TestApiAchievements object at 0x7fb7dd2cc6a0>\nachievements_api = <tests_api.api.achievements.AchievementsApi object at 0x7fb7dd504ee0>\nassertion = <class 'tests_api.utils.asserts.Assertion'>\n\n    @allure.title(\"Пометить все уведомления прочитанным\")\n    @allure.feature(\"[API] Уведомления\")\n    @allure.step(\"отправляем запрос PATCH\")\n    def test_mark_notification_all(self, achievements_api, assertion) -> None:\n        resp = achievements_api.mark_all_notify(\n            access_token=env_vars.ACCESS_TOKEN,\n        )\n>       assertion(resp).should_have_status_code(200)\n\ntests_api/test_achievements_api.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests_api.utils.asserts.Assertion object at 0x7fb7dd54fa60>\nexpected_status_code = 200, error_message = None\n\n    def should_have_status_code(self, expected_status_code: int, error_message=None):\n        with allure.step(f\"Проверка статус-кода {expected_status_code}\"):\n            if self.response is None:\n                raise AssertionError(\"Response is None\")\n    \n>           assert self.response.status_code == expected_status_code, (\n                error_message\n                if error_message is not None\n                else f\"Ожидался статус-код {expected_status_code}, \"\n                f\"но был получен {self.response.status_code}\"\n            )\nE           AssertionError: Ожидался статус-код 200, но был получен 500\n\ntests_api/utils/asserts.py:17: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1710263128199,"stop":1710263128199,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"_session_faker","time":{"start":1710263128199,"stop":1710263128270,"duration":71},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"delete_output_dir","time":{"start":1710263128199,"stop":1710263128199,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"base_url","time":{"start":1710263128199,"stop":1710263128199,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"pytestconfig","time":{"start":1710263128199,"stop":1710263128199,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"base_url_showcase","time":{"start":1710263128270,"stop":1710263128270,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"env","time":{"start":1710263128270,"stop":1710263128270,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser_type_launch_args","time":{"start":1710263128270,"stop":1710263128271,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"assertion","time":{"start":1710263128270,"stop":1710263128270,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"playwright","time":{"start":1710263128271,"stop":1710263128545,"duration":274},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser_type","time":{"start":1710263128545,"stop":1710263128545,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser","time":{"start":1710263128545,"stop":1710263128759,"duration":214},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"launch_browser","time":{"start":1710263128545,"stop":1710263128545,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"device","time":{"start":1710263128759,"stop":1710263128759,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser_context_args","time":{"start":1710263128759,"stop":1710263128759,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"context","time":{"start":1710263129766,"stop":1710263129771,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"page","time":{"start":1710263129771,"stop":1710263129798,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"api_client_showcase","time":{"start":1710263129798,"stop":1710263129798,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"screenshot_on_failure","time":{"start":1710263129798,"stop":1710263129798,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"achievements_api","time":{"start":1710263129799,"stop":1710263129799,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Ожидался статус-код 200, но был получен 500","statusTrace":"self = <tests_api.test_achievements_api.TestApiAchievements object at 0x7fb7dd2cc6a0>\nachievements_api = <tests_api.api.achievements.AchievementsApi object at 0x7fb7dd504ee0>\nassertion = <class 'tests_api.utils.asserts.Assertion'>\n\n    @allure.title(\"Пометить все уведомления прочитанным\")\n    @allure.feature(\"[API] Уведомления\")\n    @allure.step(\"отправляем запрос PATCH\")\n    def test_mark_notification_all(self, achievements_api, assertion) -> None:\n        resp = achievements_api.mark_all_notify(\n            access_token=env_vars.ACCESS_TOKEN,\n        )\n>       assertion(resp).should_have_status_code(200)\n\ntests_api/test_achievements_api.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests_api.utils.asserts.Assertion object at 0x7fb7dd54fa60>\nexpected_status_code = 200, error_message = None\n\n    def should_have_status_code(self, expected_status_code: int, error_message=None):\n        with allure.step(f\"Проверка статус-кода {expected_status_code}\"):\n            if self.response is None:\n                raise AssertionError(\"Response is None\")\n    \n>           assert self.response.status_code == expected_status_code, (\n                error_message\n                if error_message is not None\n                else f\"Ожидался статус-код {expected_status_code}, \"\n                f\"но был получен {self.response.status_code}\"\n            )\nE           AssertionError: Ожидался статус-код 200, но был получен 500\n\ntests_api/utils/asserts.py:17: AssertionError","steps":[{"name":"отправляем запрос PATCH","time":{"start":1710263129799,"stop":1710263130136,"duration":337},"status":"failed","statusMessage":"AssertionError: Ожидался статус-код 200, но был получен 500\n","statusTrace":"  File \"/usr/local/lib/python3.10/dist-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/builds/2uit/Chmaki_autotests/tests_api/test_achievements_api.py\", line 42, in test_mark_notification_all\n    assertion(resp).should_have_status_code(200)\n  File \"/builds/2uit/Chmaki_autotests/tests_api/utils/asserts.py\", line 17, in should_have_status_code\n    assert self.response.status_code == expected_status_code, (\n","steps":[{"name":"Выполняю PATCH запрос на роут api/notification/mark-all-as-read","time":{"start":1710263129799,"stop":1710263130136,"duration":337},"status":"passed","steps":[{"name":"request","time":{"start":1710263129799,"stop":1710263130136,"duration":337},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"method","value":"'PATCH'"},{"name":"url","value":"'https://dev.agentum.pro/backend/api/notification/mark-all-as-read'"},{"name":"timeout","value":"5000"},{"name":"headers","value":"{'Authorization': 'Bearer \"248|YwQogs0aDUHzYIgAIN88OBaTDiKesDmAdciD9vkz\"'}"},{"name":"json","value":"None"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Проверка статус-кода 200","time":{"start":1710263130136,"stop":1710263130136,"duration":0},"status":"failed","statusMessage":"AssertionError: Ожидался статус-код 200, но был получен 500\n","statusTrace":"  File \"/builds/2uit/Chmaki_autotests/tests_api/utils/asserts.py\", line 17, in should_have_status_code\n    assert self.response.status_code == expected_status_code, (\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[{"name":"achievements_api","value":"<tests_api.api.achievements.AchievementsApi object at 0x7fb7dd504ee0>"},{"name":"assertion","value":"<class 'tests_api.utils.asserts.Assertion'>"}],"stepsCount":3,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"api_client_showcase::0","time":{"start":1710263130142,"stop":1710263130142,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"screenshot_on_failure::0","time":{"start":1710263130142,"stop":1710263130223,"duration":81},"status":"passed","steps":[],"attachments":[{"uid":"831663c2d1df1b9e","name":"screenshot_test_mark_notification_all","source":"831663c2d1df1b9e.png","type":"image/png","size":5320}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"context::0","time":{"start":1710263130224,"stop":1710263130231,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"page::0","time":{"start":1710263130224,"stop":1710263130224,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser::0","time":{"start":1710263142354,"stop":1710263142375,"duration":21},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"playwright::0","time":{"start":1710263142379,"stop":1710263142384,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"Чмаки. API"},{"name":"feature","value":"[API] Уведомления"},{"name":"suite","value":"API тесты"},{"name":"subSuite","value":"API запросы по достижениям"},{"name":"tag","value":"api"},{"name":"host","value":"runner-vlhmfsk-project-154-concurrent-0"},{"name":"thread","value":"60-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests_api.test_achievements_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser_name","value":"'chromium'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["api"]},"source":"d880f4a6f72e275d.json","parameterValues":["'chromium'"]}