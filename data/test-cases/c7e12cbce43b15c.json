{"uid":"c7e12cbce43b15c","name":"Создание профиля для текущего пользователя","fullName":"tests_api.test_view_profile.TestApiProfile#test_create_profile","historyId":"71eecb45a78456502c6a5a9a8b8ce287","time":{"start":1718947265836,"stop":1718947266363,"duration":527},"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.10/dist-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd9c7d88fd0>\ns = '<!DOCTYPE html>\\n<html >\\n<head><meta charset=\"utf-8\">\\n<title>Agentum</title>\\n<meta name=\"viewport\" content=\"width=..._nuxt/\",cdnURL:\"\"}}</script><script type=\"module\" src=\"/_nuxt/entry.301d24d8.js\" crossorigin></script></body>\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/lib/python3.10/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_view_profile.TestApiProfile object at 0x7fd9c63b9f30>\nassertion = <class 'tests_api.utils.asserts.Assertion'>\nprofile_api = <tests_api.api.profile.ProfileApi object at 0x7fd9c65ba7d0>\n\n    @allure.title(\"Создание профиля для текущего пользователя\")\n    @allure.feature(\"[API] Профиль\")\n    @allure.step(\"отправляем запрос POST\")\n    def test_create_profile(self, assertion, profile_api) -> None:\n        fake = faker.Faker(locale=\"ru_RU\")\n        first_name = fake.first_name()\n        last_name = fake.last_name()\n        middle_name = fake.middle_name()\n        city = fake.city()\n        resp = profile_api.user_create(\n            first_name=first_name,\n            last_name=last_name,\n            middle_name=middle_name,\n            city=city,\n            access_token=env_vars.ACCESS_TOKEN,\n        )\n>       assertion(resp.json()).should_actual_scheme(UserProfile)\n\ntests_api/test_view_profile.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.10/dist-packages/requests/models.py:975: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1718947256912,"stop":1718947256912,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1718947256912,"stop":1718947256912,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1718947256913,"stop":1718947256913,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1718947256913,"stop":1718947256913,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"_session_faker","time":{"start":1718947256913,"stop":1718947257004,"duration":91},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"assertion","time":{"start":1718947257004,"stop":1718947257004,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"browser_type_launch_args","time":{"start":1718947257005,"stop":1718947257005,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"playwright","time":{"start":1718947257005,"stop":1718947257422,"duration":417},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"env","time":{"start":1718947257005,"stop":1718947257005,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"base_url_showcase","time":{"start":1718947257005,"stop":1718947257005,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"browser_type","time":{"start":1718947257422,"stop":1718947257422,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"browser","time":{"start":1718947257423,"stop":1718947257756,"duration":333},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"launch_browser","time":{"start":1718947257423,"stop":1718947257423,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"browser_context_args","time":{"start":1718947257757,"stop":1718947257757,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1718947257757,"stop":1718947257757,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"context","time":{"start":1718947265784,"stop":1718947265791,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"page","time":{"start":1718947265791,"stop":1718947265835,"duration":44},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"screenshot_on_failure","time":{"start":1718947265835,"stop":1718947265835,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"api_client_showcase","time":{"start":1718947265835,"stop":1718947265835,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"profile_api","time":{"start":1718947265835,"stop":1718947265835,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.10/dist-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd9c7d88fd0>\ns = '<!DOCTYPE html>\\n<html >\\n<head><meta charset=\"utf-8\">\\n<title>Agentum</title>\\n<meta name=\"viewport\" content=\"width=..._nuxt/\",cdnURL:\"\"}}</script><script type=\"module\" src=\"/_nuxt/entry.301d24d8.js\" crossorigin></script></body>\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/lib/python3.10/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_api.test_view_profile.TestApiProfile object at 0x7fd9c63b9f30>\nassertion = <class 'tests_api.utils.asserts.Assertion'>\nprofile_api = <tests_api.api.profile.ProfileApi object at 0x7fd9c65ba7d0>\n\n    @allure.title(\"Создание профиля для текущего пользователя\")\n    @allure.feature(\"[API] Профиль\")\n    @allure.step(\"отправляем запрос POST\")\n    def test_create_profile(self, assertion, profile_api) -> None:\n        fake = faker.Faker(locale=\"ru_RU\")\n        first_name = fake.first_name()\n        last_name = fake.last_name()\n        middle_name = fake.middle_name()\n        city = fake.city()\n        resp = profile_api.user_create(\n            first_name=first_name,\n            last_name=last_name,\n            middle_name=middle_name,\n            city=city,\n            access_token=env_vars.ACCESS_TOKEN,\n        )\n>       assertion(resp.json()).should_actual_scheme(UserProfile)\n\ntests_api/test_view_profile.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.10/dist-packages/requests/models.py:975: JSONDecodeError","steps":[{"name":"отправляем запрос POST","time":{"start":1718947265836,"stop":1718947266360,"duration":524},"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","statusTrace":"  File \"/usr/local/lib/python3.10/dist-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/builds/2uit/Chmaki_autotests/tests_api/test_view_profile.py\", line 46, in test_create_profile\n    assertion(resp.json()).should_actual_scheme(UserProfile)\n  File \"/usr/local/lib/python3.10/dist-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n","steps":[{"name":"Отправить POST запрос на api/users/profile","time":{"start":1718947265926,"stop":1718947266360,"duration":434},"status":"passed","steps":[{"name":"request","time":{"start":1718947265927,"stop":1718947266360,"duration":433},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"method","value":"'POST'"},{"name":"url","value":"'https://dev.agentum.pro/backend/api/users/profile'"},{"name":"timeout","value":"5000"},{"name":"json","value":"{'first_name': 'Гурий', 'last_name': 'Молчанова', 'middle_name': 'Аркадьевна', 'city': 'клх Юровск', 'employment_status': 'self-employed'}"},{"name":"headers","value":"{'Content-type': 'application/json', 'Authorization': 'Bearer YwQogs0aDUHzYIgAIN88OBaTDiKesDmAdciD9vkz'}"},{"name":"params","value":"None"},{"name":"files","value":"None"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"assertion","value":"<class 'tests_api.utils.asserts.Assertion'>"},{"name":"profile_api","value":"<tests_api.api.profile.ProfileApi object at 0x7fd9c65ba7d0>"}],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":3,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"screenshot_on_failure::0","time":{"start":1718947266392,"stop":1718947266487,"duration":95},"status":"passed","steps":[],"attachments":[{"uid":"db6c0b188a4e8707","name":"screenshot_test_create_profile","source":"db6c0b188a4e8707.png","type":"image/png","size":5320}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false},{"name":"api_client_showcase::0","time":{"start":1718947266392,"stop":1718947266392,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"page::0","time":{"start":1718947266487,"stop":1718947266487,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"context::0","time":{"start":1718947266488,"stop":1718947266500,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"browser::0","time":{"start":1718947272267,"stop":1718947272296,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false},{"name":"playwright::0","time":{"start":1718947272300,"stop":1718947272306,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"API тесты"},{"name":"feature","value":"[API] Профиль"},{"name":"subSuite","value":"API запросы по профилю"},{"name":"parentSuite","value":"Чмаки. API"},{"name":"tag","value":"api"},{"name":"host","value":"runner-vlhmfsk-project-154-concurrent-0"},{"name":"thread","value":"60-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests_api.test_view_profile"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser_name","value":"'chromium'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["api"]},"source":"c7e12cbce43b15c.json","parameterValues":["'chromium'"]}