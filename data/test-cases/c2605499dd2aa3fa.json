{"uid":"c2605499dd2aa3fa","name":"Просмотр профиля","fullName":"tests_api.test_view_profile.TestApiProfile#test_view_profile","historyId":"a7d34a5a5395a10d9ef26be14a78ae0c","time":{"start":1702964431392,"stop":1702964431679,"duration":287},"status":"failed","statusMessage":"AssertionError: JSON Schema validation failed. Error: None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['data']['properties']['avatar_url']:\n    {'type': 'string'}\n\nOn instance['data']['avatar_url']:\n    None","statusTrace":"self = <tests_api.test_view_profile.TestApiProfile object at 0x7faa1dfc6680>\n\n    @allure.title(\"Просмотр профиля\")\n    @allure.feature(\"[API] UsersProfile\")\n    def test_view_profile(self) -> None:\n        url = config.BASE_URL + \"api/users/profile\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": config.AUTH_TOKEN,\n        }\n        with allure.step(\"Отправить GET запрос\"):\n            try:\n                response = requests.post(url, headers=headers)\n                response.raise_for_status()\n            except requests.exceptions.RequestException as e:\n                logger.error(f\"Request failed: {str(e)}\")\n                pytest.fail(f\"Request failed: {str(e)}\")\n        with allure.step(\"Проверка cтатуса кода\"):\n            assert_status_code(response, 200)\n        with allure.step(\"Валидация JSON схемы\"):\n>           assert_json_schema(response, user_profile)\n\ntests_api/test_view_profile.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>\nschema = {'properties': {'data': {'id': 'object', 'properties': {'avatar_url': {'type': 'string'}, 'city': {'type': 'string'}, ...ired': ['id', 'first_name', 'last_name', 'middle_name', 'employment_status']}}, 'required': ['data'], 'type': 'object'}\n\n    @allure.step(\"Проверка JSON схемы\")\n    def assert_json_schema(response, schema):\n        is_valid, error = validate_json(response.json(), schema)\n>       assert is_valid, f\"JSON Schema validation failed. Error: {error}\"\nE       AssertionError: JSON Schema validation failed. Error: None is not of type 'string'\nE       \nE       Failed validating 'type' in schema['properties']['data']['properties']['avatar_url']:\nE           {'type': 'string'}\nE       \nE       On instance['data']['avatar_url']:\nE           None\n\ntests_api/utils/asserts.py:18: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1702964425780,"stop":1702964425839,"duration":59},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"_verify_url","time":{"start":1702964425780,"stop":1702964425780,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"base_url","time":{"start":1702964425780,"stop":1702964425780,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"pytestconfig","time":{"start":1702964425780,"stop":1702964425780,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"delete_output_dir","time":{"start":1702964425780,"stop":1702964425780,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser_type_launch_args","time":{"start":1702964425839,"stop":1702964425839,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"playwright","time":{"start":1702964425839,"stop":1702964426189,"duration":350},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser","time":{"start":1702964426190,"stop":1702964426396,"duration":206},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"launch_browser","time":{"start":1702964426190,"stop":1702964426190,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser_type","time":{"start":1702964426190,"stop":1702964426190,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"device","time":{"start":1702964426396,"stop":1702964426396,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser_context_args","time":{"start":1702964426396,"stop":1702964426396,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"context","time":{"start":1702964431356,"stop":1702964431360,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"page","time":{"start":1702964431361,"stop":1702964431390,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"screenshot_on_failure","time":{"start":1702964431391,"stop":1702964431391,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: JSON Schema validation failed. Error: None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['data']['properties']['avatar_url']:\n    {'type': 'string'}\n\nOn instance['data']['avatar_url']:\n    None","statusTrace":"self = <tests_api.test_view_profile.TestApiProfile object at 0x7faa1dfc6680>\n\n    @allure.title(\"Просмотр профиля\")\n    @allure.feature(\"[API] UsersProfile\")\n    def test_view_profile(self) -> None:\n        url = config.BASE_URL + \"api/users/profile\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": config.AUTH_TOKEN,\n        }\n        with allure.step(\"Отправить GET запрос\"):\n            try:\n                response = requests.post(url, headers=headers)\n                response.raise_for_status()\n            except requests.exceptions.RequestException as e:\n                logger.error(f\"Request failed: {str(e)}\")\n                pytest.fail(f\"Request failed: {str(e)}\")\n        with allure.step(\"Проверка cтатуса кода\"):\n            assert_status_code(response, 200)\n        with allure.step(\"Валидация JSON схемы\"):\n>           assert_json_schema(response, user_profile)\n\ntests_api/test_view_profile.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>\nschema = {'properties': {'data': {'id': 'object', 'properties': {'avatar_url': {'type': 'string'}, 'city': {'type': 'string'}, ...ired': ['id', 'first_name', 'last_name', 'middle_name', 'employment_status']}}, 'required': ['data'], 'type': 'object'}\n\n    @allure.step(\"Проверка JSON схемы\")\n    def assert_json_schema(response, schema):\n        is_valid, error = validate_json(response.json(), schema)\n>       assert is_valid, f\"JSON Schema validation failed. Error: {error}\"\nE       AssertionError: JSON Schema validation failed. Error: None is not of type 'string'\nE       \nE       Failed validating 'type' in schema['properties']['data']['properties']['avatar_url']:\nE           {'type': 'string'}\nE       \nE       On instance['data']['avatar_url']:\nE           None\n\ntests_api/utils/asserts.py:18: AssertionError","steps":[{"name":"Отправить GET запрос","time":{"start":1702964431392,"stop":1702964431674,"duration":282},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Проверка cтатуса кода","time":{"start":1702964431674,"stop":1702964431675,"duration":1},"status":"passed","steps":[{"name":"Проверка статуса кода","time":{"start":1702964431675,"stop":1702964431675,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200]>"},{"name":"expected_status_code","value":"200"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Валидация JSON схемы","time":{"start":1702964431675,"stop":1702964431679,"duration":4},"status":"failed","statusMessage":"AssertionError: JSON Schema validation failed. Error: None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['data']['properties']['avatar_url']:\n    {'type': 'string'}\n\nOn instance['data']['avatar_url']:\n    None\n","statusTrace":"  File \"/builds/2uit/Chmaki_autotests/tests_api/test_view_profile.py\", line 40, in test_view_profile\n    assert_json_schema(response, user_profile)\n  File \"/usr/local/lib/python3.10/dist-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/builds/2uit/Chmaki_autotests/tests_api/utils/asserts.py\", line 18, in assert_json_schema\n    assert is_valid, f\"JSON Schema validation failed. Error: {error}\"\n","steps":[{"name":"Проверка JSON схемы","time":{"start":1702964431675,"stop":1702964431679,"duration":4},"status":"failed","statusMessage":"AssertionError: JSON Schema validation failed. Error: None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['data']['properties']['avatar_url']:\n    {'type': 'string'}\n\nOn instance['data']['avatar_url']:\n    None\n","statusTrace":"  File \"/usr/local/lib/python3.10/dist-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/builds/2uit/Chmaki_autotests/tests_api/utils/asserts.py\", line 18, in assert_json_schema\n    assert is_valid, f\"JSON Schema validation failed. Error: {error}\"\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200]>"},{"name":"schema","value":"{'type': 'object', 'properties': {'data': {'id': 'object', 'properties': {'id': {'type': 'integer'}, 'first_name': {'type': 'string'}, 'last_name': {'type': 'string'}, 'middle_name': {'type': 'string'}, 'employment_status': {'type': 'string'}, 'city': {'type': 'string'}, 'avatar_url': {'type': 'string'}}, 'required': ['id', 'first_name', 'last_name', 'middle_name', 'employment_status']}}, 'required': ['data']}"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"screenshot_on_failure::0","time":{"start":1702964431684,"stop":1702964431766,"duration":82},"status":"passed","steps":[],"attachments":[{"uid":"2046f32a332ee04e","name":"screenshot_test_view_profile","source":"2046f32a332ee04e.png","type":"image/png","size":5320}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"page::0","time":{"start":1702964431766,"stop":1702964431766,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"context::0","time":{"start":1702964431767,"stop":1702964431772,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser::0","time":{"start":1702964434302,"stop":1702964434332,"duration":30},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"playwright::0","time":{"start":1702964434334,"stop":1702964434338,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"Чмаки. API"},{"name":"suite","value":"API тесты"},{"name":"feature","value":"[API] UsersProfile"},{"name":"subSuite","value":"API запросы по профилю"},{"name":"tag","value":"api"},{"name":"host","value":"runner-vlhmfsk-project-154-concurrent-0"},{"name":"thread","value":"47-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests_api.test_view_profile"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser_name","value":"'chromium'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["api"]},"source":"c2605499dd2aa3fa.json","parameterValues":["'chromium'"]}